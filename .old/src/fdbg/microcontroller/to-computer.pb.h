/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.9-dev */

#ifndef PB_TO_COMPUTER_PB_H_INCLUDED
#define PB_TO_COMPUTER_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _Ack {
    char dummy_field;
} Ack;

typedef struct _WriteMemory {
    uint64_t initial_addr;
    pb_callback_t bytes;
} WriteMemory;

typedef struct _ReadMemory {
    uint64_t initial_addr;
    uint32_t sz;
} ReadMemory;

typedef struct _ToComputer {
    pb_size_t which_message;
    union {
        Ack ack;
        WriteMemory write_memory;
        ReadMemory read_memory;
    } message;
} ToComputer;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define Ack_init_default                         {0}
#define WriteMemory_init_default                 {0, {{NULL}, NULL}}
#define ReadMemory_init_default                  {0, 0}
#define ToComputer_init_default                  {0, {Ack_init_default}}
#define Ack_init_zero                            {0}
#define WriteMemory_init_zero                    {0, {{NULL}, NULL}}
#define ReadMemory_init_zero                     {0, 0}
#define ToComputer_init_zero                     {0, {Ack_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define WriteMemory_initial_addr_tag             1
#define WriteMemory_bytes_tag                    2
#define ReadMemory_initial_addr_tag              1
#define ReadMemory_sz_tag                        2
#define ToComputer_ack_tag                       1
#define ToComputer_write_memory_tag              2
#define ToComputer_read_memory_tag               3

/* Struct field encoding specification for nanopb */
#define Ack_FIELDLIST(X, a) \

#define Ack_CALLBACK NULL
#define Ack_DEFAULT NULL

#define WriteMemory_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT64,   initial_addr,      1) \
X(a, CALLBACK, SINGULAR, BYTES,    bytes,             2)
#define WriteMemory_CALLBACK pb_default_field_callback
#define WriteMemory_DEFAULT NULL

#define ReadMemory_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT64,   initial_addr,      1) \
X(a, STATIC,   SINGULAR, UINT32,   sz,                2)
#define ReadMemory_CALLBACK NULL
#define ReadMemory_DEFAULT NULL

#define ToComputer_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message,ack,message.ack),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message,write_memory,message.write_memory),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message,read_memory,message.read_memory),   3)
#define ToComputer_CALLBACK NULL
#define ToComputer_DEFAULT NULL
#define ToComputer_message_ack_MSGTYPE Ack
#define ToComputer_message_write_memory_MSGTYPE WriteMemory
#define ToComputer_message_read_memory_MSGTYPE ReadMemory

extern const pb_msgdesc_t Ack_msg;
extern const pb_msgdesc_t WriteMemory_msg;
extern const pb_msgdesc_t ReadMemory_msg;
extern const pb_msgdesc_t ToComputer_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Ack_fields &Ack_msg
#define WriteMemory_fields &WriteMemory_msg
#define ReadMemory_fields &ReadMemory_msg
#define ToComputer_fields &ToComputer_msg

/* Maximum encoded size of messages (where known) */
/* WriteMemory_size depends on runtime parameters */
/* ToComputer_size depends on runtime parameters */
#define Ack_size                                 0
#define ReadMemory_size                          17
#define TO_COMPUTER_PB_H_MAX_SIZE                ReadMemory_size

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
