// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf/to-computer.proto
// Protobuf C++ Version: 4.25.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_protobuf_2fto_2dcomputer_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protobuf_2fto_2dcomputer_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protobuf_2fto_2dcomputer_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_protobuf_2fto_2dcomputer_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_protobuf_2fto_2dcomputer_2eproto;
namespace fdbg {
class Ack;
struct AckDefaultTypeInternal;
extern AckDefaultTypeInternal _Ack_default_instance_;
class ReadMemory;
struct ReadMemoryDefaultTypeInternal;
extern ReadMemoryDefaultTypeInternal _ReadMemory_default_instance_;
class ToComputer;
struct ToComputerDefaultTypeInternal;
extern ToComputerDefaultTypeInternal _ToComputer_default_instance_;
class WriteMemory;
struct WriteMemoryDefaultTypeInternal;
extern WriteMemoryDefaultTypeInternal _WriteMemory_default_instance_;
}  // namespace fdbg
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace fdbg {

// ===================================================================


// -------------------------------------------------------------------

class WriteMemory final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fdbg.WriteMemory) */ {
 public:
  inline WriteMemory() : WriteMemory(nullptr) {}
  ~WriteMemory() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WriteMemory(::google::protobuf::internal::ConstantInitialized);

  inline WriteMemory(const WriteMemory& from)
      : WriteMemory(nullptr, from) {}
  WriteMemory(WriteMemory&& from) noexcept
    : WriteMemory() {
    *this = ::std::move(from);
  }

  inline WriteMemory& operator=(const WriteMemory& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteMemory& operator=(WriteMemory&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriteMemory& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriteMemory* internal_default_instance() {
    return reinterpret_cast<const WriteMemory*>(
               &_WriteMemory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WriteMemory& a, WriteMemory& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteMemory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteMemory* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WriteMemory* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WriteMemory>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WriteMemory& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const WriteMemory& from) {
    WriteMemory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(WriteMemory* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "fdbg.WriteMemory";
  }
  protected:
  explicit WriteMemory(::google::protobuf::Arena* arena);
  WriteMemory(::google::protobuf::Arena* arena, const WriteMemory& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBytesFieldNumber = 2,
    kInitialAddrFieldNumber = 1,
    kValidateFieldNumber = 3,
  };
  // bytes bytes = 2;
  void clear_bytes() ;
  const std::string& bytes() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bytes(Arg_&& arg, Args_... args);
  std::string* mutable_bytes();
  PROTOBUF_NODISCARD std::string* release_bytes();
  void set_allocated_bytes(std::string* value);

  private:
  const std::string& _internal_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bytes(
      const std::string& value);
  std::string* _internal_mutable_bytes();

  public:
  // uint64 initial_addr = 1;
  void clear_initial_addr() ;
  ::uint64_t initial_addr() const;
  void set_initial_addr(::uint64_t value);

  private:
  ::uint64_t _internal_initial_addr() const;
  void _internal_set_initial_addr(::uint64_t value);

  public:
  // bool validate = 3;
  void clear_validate() ;
  bool validate() const;
  void set_validate(bool value);

  private:
  bool _internal_validate() const;
  void _internal_set_validate(bool value);

  public:
  // @@protoc_insertion_point(class_scope:fdbg.WriteMemory)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr bytes_;
    ::uint64_t initial_addr_;
    bool validate_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobuf_2fto_2dcomputer_2eproto;
};// -------------------------------------------------------------------

class ReadMemory final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fdbg.ReadMemory) */ {
 public:
  inline ReadMemory() : ReadMemory(nullptr) {}
  ~ReadMemory() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ReadMemory(::google::protobuf::internal::ConstantInitialized);

  inline ReadMemory(const ReadMemory& from)
      : ReadMemory(nullptr, from) {}
  ReadMemory(ReadMemory&& from) noexcept
    : ReadMemory() {
    *this = ::std::move(from);
  }

  inline ReadMemory& operator=(const ReadMemory& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadMemory& operator=(ReadMemory&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadMemory& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadMemory* internal_default_instance() {
    return reinterpret_cast<const ReadMemory*>(
               &_ReadMemory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ReadMemory& a, ReadMemory& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadMemory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadMemory* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadMemory* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadMemory>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReadMemory& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ReadMemory& from) {
    ReadMemory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ReadMemory* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "fdbg.ReadMemory";
  }
  protected:
  explicit ReadMemory(::google::protobuf::Arena* arena);
  ReadMemory(::google::protobuf::Arena* arena, const ReadMemory& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInitialAddrFieldNumber = 1,
    kSzFieldNumber = 2,
    kSequencesFieldNumber = 3,
  };
  // uint64 initial_addr = 1;
  void clear_initial_addr() ;
  ::uint64_t initial_addr() const;
  void set_initial_addr(::uint64_t value);

  private:
  ::uint64_t _internal_initial_addr() const;
  void _internal_set_initial_addr(::uint64_t value);

  public:
  // uint32 sz = 2;
  void clear_sz() ;
  ::uint32_t sz() const;
  void set_sz(::uint32_t value);

  private:
  ::uint32_t _internal_sz() const;
  void _internal_set_sz(::uint32_t value);

  public:
  // uint32 sequences = 3;
  void clear_sequences() ;
  ::uint32_t sequences() const;
  void set_sequences(::uint32_t value);

  private:
  ::uint32_t _internal_sequences() const;
  void _internal_set_sequences(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fdbg.ReadMemory)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint64_t initial_addr_;
    ::uint32_t sz_;
    ::uint32_t sequences_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobuf_2fto_2dcomputer_2eproto;
};// -------------------------------------------------------------------

class Ack final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:fdbg.Ack) */ {
 public:
  inline Ack() : Ack(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ack(::google::protobuf::internal::ConstantInitialized);

  inline Ack(const Ack& from)
      : Ack(nullptr, from) {}
  Ack(Ack&& from) noexcept
    : Ack() {
    *this = ::std::move(from);
  }

  inline Ack& operator=(const Ack& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ack& operator=(Ack&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ack& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ack* internal_default_instance() {
    return reinterpret_cast<const Ack*>(
               &_Ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Ack& a, Ack& b) {
    a.Swap(&b);
  }
  inline void Swap(Ack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ack* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ack* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ack>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Ack& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Ack& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "fdbg.Ack";
  }
  protected:
  explicit Ack(::google::protobuf::Arena* arena);
  Ack(::google::protobuf::Arena* arena, const Ack& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:fdbg.Ack)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_protobuf_2fto_2dcomputer_2eproto;
};// -------------------------------------------------------------------

class ToComputer final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fdbg.ToComputer) */ {
 public:
  inline ToComputer() : ToComputer(nullptr) {}
  ~ToComputer() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ToComputer(::google::protobuf::internal::ConstantInitialized);

  inline ToComputer(const ToComputer& from)
      : ToComputer(nullptr, from) {}
  ToComputer(ToComputer&& from) noexcept
    : ToComputer() {
    *this = ::std::move(from);
  }

  inline ToComputer& operator=(const ToComputer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ToComputer& operator=(ToComputer&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ToComputer& default_instance() {
    return *internal_default_instance();
  }
  enum MessageCase {
    kAck = 1,
    kWriteMemory = 2,
    kReadMemory = 3,
    MESSAGE_NOT_SET = 0,
  };

  static inline const ToComputer* internal_default_instance() {
    return reinterpret_cast<const ToComputer*>(
               &_ToComputer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ToComputer& a, ToComputer& b) {
    a.Swap(&b);
  }
  inline void Swap(ToComputer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ToComputer* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ToComputer* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ToComputer>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ToComputer& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ToComputer& from) {
    ToComputer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ToComputer* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "fdbg.ToComputer";
  }
  protected:
  explicit ToComputer(::google::protobuf::Arena* arena);
  ToComputer(::google::protobuf::Arena* arena, const ToComputer& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAckFieldNumber = 1,
    kWriteMemoryFieldNumber = 2,
    kReadMemoryFieldNumber = 3,
  };
  // .fdbg.Ack ack = 1;
  bool has_ack() const;
  private:
  bool _internal_has_ack() const;

  public:
  void clear_ack() ;
  const ::fdbg::Ack& ack() const;
  PROTOBUF_NODISCARD ::fdbg::Ack* release_ack();
  ::fdbg::Ack* mutable_ack();
  void set_allocated_ack(::fdbg::Ack* value);
  void unsafe_arena_set_allocated_ack(::fdbg::Ack* value);
  ::fdbg::Ack* unsafe_arena_release_ack();

  private:
  const ::fdbg::Ack& _internal_ack() const;
  ::fdbg::Ack* _internal_mutable_ack();

  public:
  // .fdbg.WriteMemory write_memory = 2;
  bool has_write_memory() const;
  private:
  bool _internal_has_write_memory() const;

  public:
  void clear_write_memory() ;
  const ::fdbg::WriteMemory& write_memory() const;
  PROTOBUF_NODISCARD ::fdbg::WriteMemory* release_write_memory();
  ::fdbg::WriteMemory* mutable_write_memory();
  void set_allocated_write_memory(::fdbg::WriteMemory* value);
  void unsafe_arena_set_allocated_write_memory(::fdbg::WriteMemory* value);
  ::fdbg::WriteMemory* unsafe_arena_release_write_memory();

  private:
  const ::fdbg::WriteMemory& _internal_write_memory() const;
  ::fdbg::WriteMemory* _internal_mutable_write_memory();

  public:
  // .fdbg.ReadMemory read_memory = 3;
  bool has_read_memory() const;
  private:
  bool _internal_has_read_memory() const;

  public:
  void clear_read_memory() ;
  const ::fdbg::ReadMemory& read_memory() const;
  PROTOBUF_NODISCARD ::fdbg::ReadMemory* release_read_memory();
  ::fdbg::ReadMemory* mutable_read_memory();
  void set_allocated_read_memory(::fdbg::ReadMemory* value);
  void unsafe_arena_set_allocated_read_memory(::fdbg::ReadMemory* value);
  ::fdbg::ReadMemory* unsafe_arena_release_read_memory();

  private:
  const ::fdbg::ReadMemory& _internal_read_memory() const;
  ::fdbg::ReadMemory* _internal_mutable_read_memory();

  public:
  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:fdbg.ToComputer)
 private:
  class _Internal;
  void set_has_ack();
  void set_has_write_memory();
  void set_has_read_memory();

  inline bool has_message() const;
  inline void clear_has_message();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 3, 3,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    union MessageUnion {
      constexpr MessageUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::fdbg::Ack* ack_;
      ::fdbg::WriteMemory* write_memory_;
      ::fdbg::ReadMemory* read_memory_;
    } message_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobuf_2fto_2dcomputer_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Ack

// -------------------------------------------------------------------

// WriteMemory

// uint64 initial_addr = 1;
inline void WriteMemory::clear_initial_addr() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.initial_addr_ = ::uint64_t{0u};
}
inline ::uint64_t WriteMemory::initial_addr() const {
  // @@protoc_insertion_point(field_get:fdbg.WriteMemory.initial_addr)
  return _internal_initial_addr();
}
inline void WriteMemory::set_initial_addr(::uint64_t value) {
  _internal_set_initial_addr(value);
  // @@protoc_insertion_point(field_set:fdbg.WriteMemory.initial_addr)
}
inline ::uint64_t WriteMemory::_internal_initial_addr() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.initial_addr_;
}
inline void WriteMemory::_internal_set_initial_addr(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.initial_addr_ = value;
}

// bytes bytes = 2;
inline void WriteMemory::clear_bytes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bytes_.ClearToEmpty();
}
inline const std::string& WriteMemory::bytes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fdbg.WriteMemory.bytes)
  return _internal_bytes();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WriteMemory::set_bytes(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.bytes_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fdbg.WriteMemory.bytes)
}
inline std::string* WriteMemory::mutable_bytes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_bytes();
  // @@protoc_insertion_point(field_mutable:fdbg.WriteMemory.bytes)
  return _s;
}
inline const std::string& WriteMemory::_internal_bytes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bytes_.Get();
}
inline void WriteMemory::_internal_set_bytes(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.bytes_.Set(value, GetArena());
}
inline std::string* WriteMemory::_internal_mutable_bytes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.bytes_.Mutable( GetArena());
}
inline std::string* WriteMemory::release_bytes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:fdbg.WriteMemory.bytes)
  return _impl_.bytes_.Release();
}
inline void WriteMemory::set_allocated_bytes(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bytes_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.bytes_.IsDefault()) {
          _impl_.bytes_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fdbg.WriteMemory.bytes)
}

// bool validate = 3;
inline void WriteMemory::clear_validate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.validate_ = false;
}
inline bool WriteMemory::validate() const {
  // @@protoc_insertion_point(field_get:fdbg.WriteMemory.validate)
  return _internal_validate();
}
inline void WriteMemory::set_validate(bool value) {
  _internal_set_validate(value);
  // @@protoc_insertion_point(field_set:fdbg.WriteMemory.validate)
}
inline bool WriteMemory::_internal_validate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.validate_;
}
inline void WriteMemory::_internal_set_validate(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.validate_ = value;
}

// -------------------------------------------------------------------

// ReadMemory

// uint64 initial_addr = 1;
inline void ReadMemory::clear_initial_addr() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.initial_addr_ = ::uint64_t{0u};
}
inline ::uint64_t ReadMemory::initial_addr() const {
  // @@protoc_insertion_point(field_get:fdbg.ReadMemory.initial_addr)
  return _internal_initial_addr();
}
inline void ReadMemory::set_initial_addr(::uint64_t value) {
  _internal_set_initial_addr(value);
  // @@protoc_insertion_point(field_set:fdbg.ReadMemory.initial_addr)
}
inline ::uint64_t ReadMemory::_internal_initial_addr() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.initial_addr_;
}
inline void ReadMemory::_internal_set_initial_addr(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.initial_addr_ = value;
}

// uint32 sz = 2;
inline void ReadMemory::clear_sz() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sz_ = 0u;
}
inline ::uint32_t ReadMemory::sz() const {
  // @@protoc_insertion_point(field_get:fdbg.ReadMemory.sz)
  return _internal_sz();
}
inline void ReadMemory::set_sz(::uint32_t value) {
  _internal_set_sz(value);
  // @@protoc_insertion_point(field_set:fdbg.ReadMemory.sz)
}
inline ::uint32_t ReadMemory::_internal_sz() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sz_;
}
inline void ReadMemory::_internal_set_sz(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sz_ = value;
}

// uint32 sequences = 3;
inline void ReadMemory::clear_sequences() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sequences_ = 0u;
}
inline ::uint32_t ReadMemory::sequences() const {
  // @@protoc_insertion_point(field_get:fdbg.ReadMemory.sequences)
  return _internal_sequences();
}
inline void ReadMemory::set_sequences(::uint32_t value) {
  _internal_set_sequences(value);
  // @@protoc_insertion_point(field_set:fdbg.ReadMemory.sequences)
}
inline ::uint32_t ReadMemory::_internal_sequences() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sequences_;
}
inline void ReadMemory::_internal_set_sequences(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sequences_ = value;
}

// -------------------------------------------------------------------

// ToComputer

// .fdbg.Ack ack = 1;
inline bool ToComputer::has_ack() const {
  return message_case() == kAck;
}
inline bool ToComputer::_internal_has_ack() const {
  return message_case() == kAck;
}
inline void ToComputer::set_has_ack() {
  _impl_._oneof_case_[0] = kAck;
}
inline void ToComputer::clear_ack() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_case() == kAck) {
    if (GetArena() == nullptr) {
      delete _impl_.message_.ack_;
    }
    clear_has_message();
  }
}
inline ::fdbg::Ack* ToComputer::release_ack() {
  // @@protoc_insertion_point(field_release:fdbg.ToComputer.ack)
  if (message_case() == kAck) {
    clear_has_message();
    auto* temp = _impl_.message_.ack_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.ack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::fdbg::Ack& ToComputer::_internal_ack() const {
  return message_case() == kAck ? *_impl_.message_.ack_ : reinterpret_cast<::fdbg::Ack&>(::fdbg::_Ack_default_instance_);
}
inline const ::fdbg::Ack& ToComputer::ack() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fdbg.ToComputer.ack)
  return _internal_ack();
}
inline ::fdbg::Ack* ToComputer::unsafe_arena_release_ack() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fdbg.ToComputer.ack)
  if (message_case() == kAck) {
    clear_has_message();
    auto* temp = _impl_.message_.ack_;
    _impl_.message_.ack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ToComputer::unsafe_arena_set_allocated_ack(::fdbg::Ack* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_message();
  if (value) {
    set_has_ack();
    _impl_.message_.ack_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fdbg.ToComputer.ack)
}
inline ::fdbg::Ack* ToComputer::_internal_mutable_ack() {
  if (message_case() != kAck) {
    clear_message();
    set_has_ack();
    _impl_.message_.ack_ = CreateMaybeMessage<::fdbg::Ack>(GetArena());
  }
  return _impl_.message_.ack_;
}
inline ::fdbg::Ack* ToComputer::mutable_ack() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::fdbg::Ack* _msg = _internal_mutable_ack();
  // @@protoc_insertion_point(field_mutable:fdbg.ToComputer.ack)
  return _msg;
}

// .fdbg.WriteMemory write_memory = 2;
inline bool ToComputer::has_write_memory() const {
  return message_case() == kWriteMemory;
}
inline bool ToComputer::_internal_has_write_memory() const {
  return message_case() == kWriteMemory;
}
inline void ToComputer::set_has_write_memory() {
  _impl_._oneof_case_[0] = kWriteMemory;
}
inline void ToComputer::clear_write_memory() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_case() == kWriteMemory) {
    if (GetArena() == nullptr) {
      delete _impl_.message_.write_memory_;
    }
    clear_has_message();
  }
}
inline ::fdbg::WriteMemory* ToComputer::release_write_memory() {
  // @@protoc_insertion_point(field_release:fdbg.ToComputer.write_memory)
  if (message_case() == kWriteMemory) {
    clear_has_message();
    auto* temp = _impl_.message_.write_memory_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.write_memory_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::fdbg::WriteMemory& ToComputer::_internal_write_memory() const {
  return message_case() == kWriteMemory ? *_impl_.message_.write_memory_ : reinterpret_cast<::fdbg::WriteMemory&>(::fdbg::_WriteMemory_default_instance_);
}
inline const ::fdbg::WriteMemory& ToComputer::write_memory() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fdbg.ToComputer.write_memory)
  return _internal_write_memory();
}
inline ::fdbg::WriteMemory* ToComputer::unsafe_arena_release_write_memory() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fdbg.ToComputer.write_memory)
  if (message_case() == kWriteMemory) {
    clear_has_message();
    auto* temp = _impl_.message_.write_memory_;
    _impl_.message_.write_memory_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ToComputer::unsafe_arena_set_allocated_write_memory(::fdbg::WriteMemory* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_message();
  if (value) {
    set_has_write_memory();
    _impl_.message_.write_memory_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fdbg.ToComputer.write_memory)
}
inline ::fdbg::WriteMemory* ToComputer::_internal_mutable_write_memory() {
  if (message_case() != kWriteMemory) {
    clear_message();
    set_has_write_memory();
    _impl_.message_.write_memory_ = CreateMaybeMessage<::fdbg::WriteMemory>(GetArena());
  }
  return _impl_.message_.write_memory_;
}
inline ::fdbg::WriteMemory* ToComputer::mutable_write_memory() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::fdbg::WriteMemory* _msg = _internal_mutable_write_memory();
  // @@protoc_insertion_point(field_mutable:fdbg.ToComputer.write_memory)
  return _msg;
}

// .fdbg.ReadMemory read_memory = 3;
inline bool ToComputer::has_read_memory() const {
  return message_case() == kReadMemory;
}
inline bool ToComputer::_internal_has_read_memory() const {
  return message_case() == kReadMemory;
}
inline void ToComputer::set_has_read_memory() {
  _impl_._oneof_case_[0] = kReadMemory;
}
inline void ToComputer::clear_read_memory() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_case() == kReadMemory) {
    if (GetArena() == nullptr) {
      delete _impl_.message_.read_memory_;
    }
    clear_has_message();
  }
}
inline ::fdbg::ReadMemory* ToComputer::release_read_memory() {
  // @@protoc_insertion_point(field_release:fdbg.ToComputer.read_memory)
  if (message_case() == kReadMemory) {
    clear_has_message();
    auto* temp = _impl_.message_.read_memory_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.read_memory_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::fdbg::ReadMemory& ToComputer::_internal_read_memory() const {
  return message_case() == kReadMemory ? *_impl_.message_.read_memory_ : reinterpret_cast<::fdbg::ReadMemory&>(::fdbg::_ReadMemory_default_instance_);
}
inline const ::fdbg::ReadMemory& ToComputer::read_memory() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fdbg.ToComputer.read_memory)
  return _internal_read_memory();
}
inline ::fdbg::ReadMemory* ToComputer::unsafe_arena_release_read_memory() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fdbg.ToComputer.read_memory)
  if (message_case() == kReadMemory) {
    clear_has_message();
    auto* temp = _impl_.message_.read_memory_;
    _impl_.message_.read_memory_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ToComputer::unsafe_arena_set_allocated_read_memory(::fdbg::ReadMemory* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_message();
  if (value) {
    set_has_read_memory();
    _impl_.message_.read_memory_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fdbg.ToComputer.read_memory)
}
inline ::fdbg::ReadMemory* ToComputer::_internal_mutable_read_memory() {
  if (message_case() != kReadMemory) {
    clear_message();
    set_has_read_memory();
    _impl_.message_.read_memory_ = CreateMaybeMessage<::fdbg::ReadMemory>(GetArena());
  }
  return _impl_.message_.read_memory_;
}
inline ::fdbg::ReadMemory* ToComputer::mutable_read_memory() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::fdbg::ReadMemory* _msg = _internal_mutable_read_memory();
  // @@protoc_insertion_point(field_mutable:fdbg.ToComputer.read_memory)
  return _msg;
}

inline bool ToComputer::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void ToComputer::clear_has_message() {
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}
inline ToComputer::MessageCase ToComputer::message_case() const {
  return ToComputer::MessageCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace fdbg


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protobuf_2fto_2dcomputer_2eproto_2epb_2eh
