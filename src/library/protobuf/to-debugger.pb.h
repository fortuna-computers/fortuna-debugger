// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf/to-debugger.proto
// Protobuf C++ Version: 4.25.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_protobuf_2fto_2ddebugger_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protobuf_2fto_2ddebugger_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protobuf_2fto_2ddebugger_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_protobuf_2fto_2ddebugger_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_protobuf_2fto_2ddebugger_2eproto;
namespace fdbg {
class AckResponse;
struct AckResponseDefaultTypeInternal;
extern AckResponseDefaultTypeInternal _AckResponse_default_instance_;
class ReadMemoryResponse;
struct ReadMemoryResponseDefaultTypeInternal;
extern ReadMemoryResponseDefaultTypeInternal _ReadMemoryResponse_default_instance_;
class ToDebugger;
struct ToDebuggerDefaultTypeInternal;
extern ToDebuggerDefaultTypeInternal _ToDebugger_default_instance_;
class WriteMemoryResponse;
struct WriteMemoryResponseDefaultTypeInternal;
extern WriteMemoryResponseDefaultTypeInternal _WriteMemoryResponse_default_instance_;
}  // namespace fdbg
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace fdbg {
enum Status : int {
  OK = 0,
  ERR_WRITING_MEMORY = 1,
  Status_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Status_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Status_IsValid(int value);
extern const uint32_t Status_internal_data_[];
constexpr Status Status_MIN = static_cast<Status>(0);
constexpr Status Status_MAX = static_cast<Status>(1);
constexpr int Status_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
Status_descriptor();
template <typename T>
const std::string& Status_Name(T value) {
  static_assert(std::is_same<T, Status>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Status_Name().");
  return Status_Name(static_cast<Status>(value));
}
template <>
inline const std::string& Status_Name(Status value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Status_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool Status_Parse(absl::string_view name, Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Status>(
      Status_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class WriteMemoryResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fdbg.WriteMemoryResponse) */ {
 public:
  inline WriteMemoryResponse() : WriteMemoryResponse(nullptr) {}
  ~WriteMemoryResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WriteMemoryResponse(::google::protobuf::internal::ConstantInitialized);

  inline WriteMemoryResponse(const WriteMemoryResponse& from)
      : WriteMemoryResponse(nullptr, from) {}
  WriteMemoryResponse(WriteMemoryResponse&& from) noexcept
    : WriteMemoryResponse() {
    *this = ::std::move(from);
  }

  inline WriteMemoryResponse& operator=(const WriteMemoryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteMemoryResponse& operator=(WriteMemoryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriteMemoryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriteMemoryResponse* internal_default_instance() {
    return reinterpret_cast<const WriteMemoryResponse*>(
               &_WriteMemoryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WriteMemoryResponse& a, WriteMemoryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteMemoryResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteMemoryResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WriteMemoryResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WriteMemoryResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WriteMemoryResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const WriteMemoryResponse& from) {
    WriteMemoryResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(WriteMemoryResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "fdbg.WriteMemoryResponse";
  }
  protected:
  explicit WriteMemoryResponse(::google::protobuf::Arena* arena);
  WriteMemoryResponse(::google::protobuf::Arena* arena, const WriteMemoryResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirstFailedPosFieldNumber = 1,
  };
  // uint64 first_failed_pos = 1;
  void clear_first_failed_pos() ;
  ::uint64_t first_failed_pos() const;
  void set_first_failed_pos(::uint64_t value);

  private:
  ::uint64_t _internal_first_failed_pos() const;
  void _internal_set_first_failed_pos(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fdbg.WriteMemoryResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint64_t first_failed_pos_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobuf_2fto_2ddebugger_2eproto;
};// -------------------------------------------------------------------

class ReadMemoryResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fdbg.ReadMemoryResponse) */ {
 public:
  inline ReadMemoryResponse() : ReadMemoryResponse(nullptr) {}
  ~ReadMemoryResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ReadMemoryResponse(::google::protobuf::internal::ConstantInitialized);

  inline ReadMemoryResponse(const ReadMemoryResponse& from)
      : ReadMemoryResponse(nullptr, from) {}
  ReadMemoryResponse(ReadMemoryResponse&& from) noexcept
    : ReadMemoryResponse() {
    *this = ::std::move(from);
  }

  inline ReadMemoryResponse& operator=(const ReadMemoryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadMemoryResponse& operator=(ReadMemoryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadMemoryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadMemoryResponse* internal_default_instance() {
    return reinterpret_cast<const ReadMemoryResponse*>(
               &_ReadMemoryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ReadMemoryResponse& a, ReadMemoryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadMemoryResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadMemoryResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadMemoryResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadMemoryResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReadMemoryResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ReadMemoryResponse& from) {
    ReadMemoryResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ReadMemoryResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "fdbg.ReadMemoryResponse";
  }
  protected:
  explicit ReadMemoryResponse(::google::protobuf::Arena* arena);
  ReadMemoryResponse(::google::protobuf::Arena* arena, const ReadMemoryResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBytesFieldNumber = 2,
    kInitialPosFieldNumber = 1,
  };
  // bytes bytes = 2;
  void clear_bytes() ;
  const std::string& bytes() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bytes(Arg_&& arg, Args_... args);
  std::string* mutable_bytes();
  PROTOBUF_NODISCARD std::string* release_bytes();
  void set_allocated_bytes(std::string* value);

  private:
  const std::string& _internal_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bytes(
      const std::string& value);
  std::string* _internal_mutable_bytes();

  public:
  // uint64 initial_pos = 1;
  void clear_initial_pos() ;
  ::uint64_t initial_pos() const;
  void set_initial_pos(::uint64_t value);

  private:
  ::uint64_t _internal_initial_pos() const;
  void _internal_set_initial_pos(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fdbg.ReadMemoryResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr bytes_;
    ::uint64_t initial_pos_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobuf_2fto_2ddebugger_2eproto;
};// -------------------------------------------------------------------

class AckResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fdbg.AckResponse) */ {
 public:
  inline AckResponse() : AckResponse(nullptr) {}
  ~AckResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AckResponse(::google::protobuf::internal::ConstantInitialized);

  inline AckResponse(const AckResponse& from)
      : AckResponse(nullptr, from) {}
  AckResponse(AckResponse&& from) noexcept
    : AckResponse() {
    *this = ::std::move(from);
  }

  inline AckResponse& operator=(const AckResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckResponse& operator=(AckResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckResponse* internal_default_instance() {
    return reinterpret_cast<const AckResponse*>(
               &_AckResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AckResponse& a, AckResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AckResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AckResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AckResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AckResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AckResponse& from) {
    AckResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AckResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "fdbg.AckResponse";
  }
  protected:
  explicit AckResponse(::google::protobuf::Arena* arena);
  AckResponse(::google::protobuf::Arena* arena, const AckResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fdbg.AckResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint32_t id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobuf_2fto_2ddebugger_2eproto;
};// -------------------------------------------------------------------

class ToDebugger final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fdbg.ToDebugger) */ {
 public:
  inline ToDebugger() : ToDebugger(nullptr) {}
  ~ToDebugger() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ToDebugger(::google::protobuf::internal::ConstantInitialized);

  inline ToDebugger(const ToDebugger& from)
      : ToDebugger(nullptr, from) {}
  ToDebugger(ToDebugger&& from) noexcept
    : ToDebugger() {
    *this = ::std::move(from);
  }

  inline ToDebugger& operator=(const ToDebugger& from) {
    CopyFrom(from);
    return *this;
  }
  inline ToDebugger& operator=(ToDebugger&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ToDebugger& default_instance() {
    return *internal_default_instance();
  }
  enum MessageCase {
    kAckResponse = 2,
    kWriteMemoryResponse = 3,
    kReadMemoryResponse = 4,
    MESSAGE_NOT_SET = 0,
  };

  static inline const ToDebugger* internal_default_instance() {
    return reinterpret_cast<const ToDebugger*>(
               &_ToDebugger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ToDebugger& a, ToDebugger& b) {
    a.Swap(&b);
  }
  inline void Swap(ToDebugger* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ToDebugger* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ToDebugger* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ToDebugger>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ToDebugger& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ToDebugger& from) {
    ToDebugger::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ToDebugger* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "fdbg.ToDebugger";
  }
  protected:
  explicit ToDebugger(::google::protobuf::Arena* arena);
  ToDebugger(::google::protobuf::Arena* arena, const ToDebugger& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kAckResponseFieldNumber = 2,
    kWriteMemoryResponseFieldNumber = 3,
    kReadMemoryResponseFieldNumber = 4,
  };
  // .fdbg.Status status = 1;
  void clear_status() ;
  ::fdbg::Status status() const;
  void set_status(::fdbg::Status value);

  private:
  ::fdbg::Status _internal_status() const;
  void _internal_set_status(::fdbg::Status value);

  public:
  // .fdbg.AckResponse ack_response = 2;
  bool has_ack_response() const;
  private:
  bool _internal_has_ack_response() const;

  public:
  void clear_ack_response() ;
  const ::fdbg::AckResponse& ack_response() const;
  PROTOBUF_NODISCARD ::fdbg::AckResponse* release_ack_response();
  ::fdbg::AckResponse* mutable_ack_response();
  void set_allocated_ack_response(::fdbg::AckResponse* value);
  void unsafe_arena_set_allocated_ack_response(::fdbg::AckResponse* value);
  ::fdbg::AckResponse* unsafe_arena_release_ack_response();

  private:
  const ::fdbg::AckResponse& _internal_ack_response() const;
  ::fdbg::AckResponse* _internal_mutable_ack_response();

  public:
  // .fdbg.WriteMemoryResponse write_memory_response = 3;
  bool has_write_memory_response() const;
  private:
  bool _internal_has_write_memory_response() const;

  public:
  void clear_write_memory_response() ;
  const ::fdbg::WriteMemoryResponse& write_memory_response() const;
  PROTOBUF_NODISCARD ::fdbg::WriteMemoryResponse* release_write_memory_response();
  ::fdbg::WriteMemoryResponse* mutable_write_memory_response();
  void set_allocated_write_memory_response(::fdbg::WriteMemoryResponse* value);
  void unsafe_arena_set_allocated_write_memory_response(::fdbg::WriteMemoryResponse* value);
  ::fdbg::WriteMemoryResponse* unsafe_arena_release_write_memory_response();

  private:
  const ::fdbg::WriteMemoryResponse& _internal_write_memory_response() const;
  ::fdbg::WriteMemoryResponse* _internal_mutable_write_memory_response();

  public:
  // .fdbg.ReadMemoryResponse read_memory_response = 4;
  bool has_read_memory_response() const;
  private:
  bool _internal_has_read_memory_response() const;

  public:
  void clear_read_memory_response() ;
  const ::fdbg::ReadMemoryResponse& read_memory_response() const;
  PROTOBUF_NODISCARD ::fdbg::ReadMemoryResponse* release_read_memory_response();
  ::fdbg::ReadMemoryResponse* mutable_read_memory_response();
  void set_allocated_read_memory_response(::fdbg::ReadMemoryResponse* value);
  void unsafe_arena_set_allocated_read_memory_response(::fdbg::ReadMemoryResponse* value);
  ::fdbg::ReadMemoryResponse* unsafe_arena_release_read_memory_response();

  private:
  const ::fdbg::ReadMemoryResponse& _internal_read_memory_response() const;
  ::fdbg::ReadMemoryResponse* _internal_mutable_read_memory_response();

  public:
  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:fdbg.ToDebugger)
 private:
  class _Internal;
  void set_has_ack_response();
  void set_has_write_memory_response();
  void set_has_read_memory_response();

  inline bool has_message() const;
  inline void clear_has_message();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 4, 3,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    int status_;
    union MessageUnion {
      constexpr MessageUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::fdbg::AckResponse* ack_response_;
      ::fdbg::WriteMemoryResponse* write_memory_response_;
      ::fdbg::ReadMemoryResponse* read_memory_response_;
    } message_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobuf_2fto_2ddebugger_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AckResponse

// uint32 id = 1;
inline void AckResponse::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = 0u;
}
inline ::uint32_t AckResponse::id() const {
  // @@protoc_insertion_point(field_get:fdbg.AckResponse.id)
  return _internal_id();
}
inline void AckResponse::set_id(::uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:fdbg.AckResponse.id)
}
inline ::uint32_t AckResponse::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void AckResponse::_internal_set_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// -------------------------------------------------------------------

// WriteMemoryResponse

// uint64 first_failed_pos = 1;
inline void WriteMemoryResponse::clear_first_failed_pos() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.first_failed_pos_ = ::uint64_t{0u};
}
inline ::uint64_t WriteMemoryResponse::first_failed_pos() const {
  // @@protoc_insertion_point(field_get:fdbg.WriteMemoryResponse.first_failed_pos)
  return _internal_first_failed_pos();
}
inline void WriteMemoryResponse::set_first_failed_pos(::uint64_t value) {
  _internal_set_first_failed_pos(value);
  // @@protoc_insertion_point(field_set:fdbg.WriteMemoryResponse.first_failed_pos)
}
inline ::uint64_t WriteMemoryResponse::_internal_first_failed_pos() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.first_failed_pos_;
}
inline void WriteMemoryResponse::_internal_set_first_failed_pos(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.first_failed_pos_ = value;
}

// -------------------------------------------------------------------

// ReadMemoryResponse

// uint64 initial_pos = 1;
inline void ReadMemoryResponse::clear_initial_pos() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.initial_pos_ = ::uint64_t{0u};
}
inline ::uint64_t ReadMemoryResponse::initial_pos() const {
  // @@protoc_insertion_point(field_get:fdbg.ReadMemoryResponse.initial_pos)
  return _internal_initial_pos();
}
inline void ReadMemoryResponse::set_initial_pos(::uint64_t value) {
  _internal_set_initial_pos(value);
  // @@protoc_insertion_point(field_set:fdbg.ReadMemoryResponse.initial_pos)
}
inline ::uint64_t ReadMemoryResponse::_internal_initial_pos() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.initial_pos_;
}
inline void ReadMemoryResponse::_internal_set_initial_pos(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.initial_pos_ = value;
}

// bytes bytes = 2;
inline void ReadMemoryResponse::clear_bytes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bytes_.ClearToEmpty();
}
inline const std::string& ReadMemoryResponse::bytes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fdbg.ReadMemoryResponse.bytes)
  return _internal_bytes();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReadMemoryResponse::set_bytes(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.bytes_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fdbg.ReadMemoryResponse.bytes)
}
inline std::string* ReadMemoryResponse::mutable_bytes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_bytes();
  // @@protoc_insertion_point(field_mutable:fdbg.ReadMemoryResponse.bytes)
  return _s;
}
inline const std::string& ReadMemoryResponse::_internal_bytes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bytes_.Get();
}
inline void ReadMemoryResponse::_internal_set_bytes(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.bytes_.Set(value, GetArena());
}
inline std::string* ReadMemoryResponse::_internal_mutable_bytes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.bytes_.Mutable( GetArena());
}
inline std::string* ReadMemoryResponse::release_bytes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:fdbg.ReadMemoryResponse.bytes)
  return _impl_.bytes_.Release();
}
inline void ReadMemoryResponse::set_allocated_bytes(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bytes_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.bytes_.IsDefault()) {
          _impl_.bytes_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fdbg.ReadMemoryResponse.bytes)
}

// -------------------------------------------------------------------

// ToDebugger

// .fdbg.Status status = 1;
inline void ToDebugger::clear_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.status_ = 0;
}
inline ::fdbg::Status ToDebugger::status() const {
  // @@protoc_insertion_point(field_get:fdbg.ToDebugger.status)
  return _internal_status();
}
inline void ToDebugger::set_status(::fdbg::Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:fdbg.ToDebugger.status)
}
inline ::fdbg::Status ToDebugger::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::fdbg::Status>(_impl_.status_);
}
inline void ToDebugger::_internal_set_status(::fdbg::Status value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.status_ = value;
}

// .fdbg.AckResponse ack_response = 2;
inline bool ToDebugger::has_ack_response() const {
  return message_case() == kAckResponse;
}
inline bool ToDebugger::_internal_has_ack_response() const {
  return message_case() == kAckResponse;
}
inline void ToDebugger::set_has_ack_response() {
  _impl_._oneof_case_[0] = kAckResponse;
}
inline void ToDebugger::clear_ack_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_case() == kAckResponse) {
    if (GetArena() == nullptr) {
      delete _impl_.message_.ack_response_;
    }
    clear_has_message();
  }
}
inline ::fdbg::AckResponse* ToDebugger::release_ack_response() {
  // @@protoc_insertion_point(field_release:fdbg.ToDebugger.ack_response)
  if (message_case() == kAckResponse) {
    clear_has_message();
    auto* temp = _impl_.message_.ack_response_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.ack_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::fdbg::AckResponse& ToDebugger::_internal_ack_response() const {
  return message_case() == kAckResponse ? *_impl_.message_.ack_response_ : reinterpret_cast<::fdbg::AckResponse&>(::fdbg::_AckResponse_default_instance_);
}
inline const ::fdbg::AckResponse& ToDebugger::ack_response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fdbg.ToDebugger.ack_response)
  return _internal_ack_response();
}
inline ::fdbg::AckResponse* ToDebugger::unsafe_arena_release_ack_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fdbg.ToDebugger.ack_response)
  if (message_case() == kAckResponse) {
    clear_has_message();
    auto* temp = _impl_.message_.ack_response_;
    _impl_.message_.ack_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ToDebugger::unsafe_arena_set_allocated_ack_response(::fdbg::AckResponse* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_message();
  if (value) {
    set_has_ack_response();
    _impl_.message_.ack_response_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fdbg.ToDebugger.ack_response)
}
inline ::fdbg::AckResponse* ToDebugger::_internal_mutable_ack_response() {
  if (message_case() != kAckResponse) {
    clear_message();
    set_has_ack_response();
    _impl_.message_.ack_response_ = CreateMaybeMessage<::fdbg::AckResponse>(GetArena());
  }
  return _impl_.message_.ack_response_;
}
inline ::fdbg::AckResponse* ToDebugger::mutable_ack_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::fdbg::AckResponse* _msg = _internal_mutable_ack_response();
  // @@protoc_insertion_point(field_mutable:fdbg.ToDebugger.ack_response)
  return _msg;
}

// .fdbg.WriteMemoryResponse write_memory_response = 3;
inline bool ToDebugger::has_write_memory_response() const {
  return message_case() == kWriteMemoryResponse;
}
inline bool ToDebugger::_internal_has_write_memory_response() const {
  return message_case() == kWriteMemoryResponse;
}
inline void ToDebugger::set_has_write_memory_response() {
  _impl_._oneof_case_[0] = kWriteMemoryResponse;
}
inline void ToDebugger::clear_write_memory_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_case() == kWriteMemoryResponse) {
    if (GetArena() == nullptr) {
      delete _impl_.message_.write_memory_response_;
    }
    clear_has_message();
  }
}
inline ::fdbg::WriteMemoryResponse* ToDebugger::release_write_memory_response() {
  // @@protoc_insertion_point(field_release:fdbg.ToDebugger.write_memory_response)
  if (message_case() == kWriteMemoryResponse) {
    clear_has_message();
    auto* temp = _impl_.message_.write_memory_response_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.write_memory_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::fdbg::WriteMemoryResponse& ToDebugger::_internal_write_memory_response() const {
  return message_case() == kWriteMemoryResponse ? *_impl_.message_.write_memory_response_ : reinterpret_cast<::fdbg::WriteMemoryResponse&>(::fdbg::_WriteMemoryResponse_default_instance_);
}
inline const ::fdbg::WriteMemoryResponse& ToDebugger::write_memory_response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fdbg.ToDebugger.write_memory_response)
  return _internal_write_memory_response();
}
inline ::fdbg::WriteMemoryResponse* ToDebugger::unsafe_arena_release_write_memory_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fdbg.ToDebugger.write_memory_response)
  if (message_case() == kWriteMemoryResponse) {
    clear_has_message();
    auto* temp = _impl_.message_.write_memory_response_;
    _impl_.message_.write_memory_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ToDebugger::unsafe_arena_set_allocated_write_memory_response(::fdbg::WriteMemoryResponse* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_message();
  if (value) {
    set_has_write_memory_response();
    _impl_.message_.write_memory_response_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fdbg.ToDebugger.write_memory_response)
}
inline ::fdbg::WriteMemoryResponse* ToDebugger::_internal_mutable_write_memory_response() {
  if (message_case() != kWriteMemoryResponse) {
    clear_message();
    set_has_write_memory_response();
    _impl_.message_.write_memory_response_ = CreateMaybeMessage<::fdbg::WriteMemoryResponse>(GetArena());
  }
  return _impl_.message_.write_memory_response_;
}
inline ::fdbg::WriteMemoryResponse* ToDebugger::mutable_write_memory_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::fdbg::WriteMemoryResponse* _msg = _internal_mutable_write_memory_response();
  // @@protoc_insertion_point(field_mutable:fdbg.ToDebugger.write_memory_response)
  return _msg;
}

// .fdbg.ReadMemoryResponse read_memory_response = 4;
inline bool ToDebugger::has_read_memory_response() const {
  return message_case() == kReadMemoryResponse;
}
inline bool ToDebugger::_internal_has_read_memory_response() const {
  return message_case() == kReadMemoryResponse;
}
inline void ToDebugger::set_has_read_memory_response() {
  _impl_._oneof_case_[0] = kReadMemoryResponse;
}
inline void ToDebugger::clear_read_memory_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_case() == kReadMemoryResponse) {
    if (GetArena() == nullptr) {
      delete _impl_.message_.read_memory_response_;
    }
    clear_has_message();
  }
}
inline ::fdbg::ReadMemoryResponse* ToDebugger::release_read_memory_response() {
  // @@protoc_insertion_point(field_release:fdbg.ToDebugger.read_memory_response)
  if (message_case() == kReadMemoryResponse) {
    clear_has_message();
    auto* temp = _impl_.message_.read_memory_response_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.read_memory_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::fdbg::ReadMemoryResponse& ToDebugger::_internal_read_memory_response() const {
  return message_case() == kReadMemoryResponse ? *_impl_.message_.read_memory_response_ : reinterpret_cast<::fdbg::ReadMemoryResponse&>(::fdbg::_ReadMemoryResponse_default_instance_);
}
inline const ::fdbg::ReadMemoryResponse& ToDebugger::read_memory_response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fdbg.ToDebugger.read_memory_response)
  return _internal_read_memory_response();
}
inline ::fdbg::ReadMemoryResponse* ToDebugger::unsafe_arena_release_read_memory_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fdbg.ToDebugger.read_memory_response)
  if (message_case() == kReadMemoryResponse) {
    clear_has_message();
    auto* temp = _impl_.message_.read_memory_response_;
    _impl_.message_.read_memory_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ToDebugger::unsafe_arena_set_allocated_read_memory_response(::fdbg::ReadMemoryResponse* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_message();
  if (value) {
    set_has_read_memory_response();
    _impl_.message_.read_memory_response_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fdbg.ToDebugger.read_memory_response)
}
inline ::fdbg::ReadMemoryResponse* ToDebugger::_internal_mutable_read_memory_response() {
  if (message_case() != kReadMemoryResponse) {
    clear_message();
    set_has_read_memory_response();
    _impl_.message_.read_memory_response_ = CreateMaybeMessage<::fdbg::ReadMemoryResponse>(GetArena());
  }
  return _impl_.message_.read_memory_response_;
}
inline ::fdbg::ReadMemoryResponse* ToDebugger::mutable_read_memory_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::fdbg::ReadMemoryResponse* _msg = _internal_mutable_read_memory_response();
  // @@protoc_insertion_point(field_mutable:fdbg.ToDebugger.read_memory_response)
  return _msg;
}

inline bool ToDebugger::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void ToDebugger::clear_has_message() {
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}
inline ToDebugger::MessageCase ToDebugger::message_case() const {
  return ToDebugger::MessageCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace fdbg


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::fdbg::Status> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fdbg::Status>() {
  return ::fdbg::Status_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protobuf_2fto_2ddebugger_2eproto_2epb_2eh
